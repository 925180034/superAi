spring:
  application:
    name: ai-fitness-assistant
  profiles:
    active: local


  datasource:
    url: jdbc:mysql://localhost:3307/fitness_ai?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:dev}
    password: ${DB_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000

  # JPA/Hibernate配置
  jpa:
    hibernate:
      ddl-auto: update  # 开发环境使用update，生产环境改为validate
    show-sql: true      # 显示SQL语句，便于调试
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true              # 格式化SQL输出
        use_sql_comments: true        # 显示SQL注释
        jdbc:
          batch_size: 20              # 批量处理大小
        order_inserts: true           # 优化插入顺序
        order_updates: true           # 优化更新顺序
#  # 多数据源配置
#  datasource:
#    # MySQL 主数据库（业务数据）
#    primary:
#      url: jdbc:mysql://rm-uf6x8ylc24tj73p2roo.rwlb.rds.aliyuncs.com/fitness_db
#      username: ${MYSQL_USERNAME}
#      password: ${MYSQL_PASSWORD}
#      driver-class-name: com.mysql.cj.jdbc.Driver
#      hikari:
#        maximum-pool-size: 20
#        minimum-idle: 5
#        connection-timeout: 20000
#
#    # PostgreSQL 向量数据库（保留原有配置用于RAG）
#    vector:
#      url: jdbc:postgresql://rm-cn-v3m4bkqae00056bo.rwlb.rds.aliyuncs.com:5432/ai_agent
#      username: ${POSTGRES_USERNAME}
#      password: ${POSTGRES_PASSWORD}
#      driver-class-name: org.postgresql.Driver
#      hikari:
#        maximum-pool-size: 10
#        minimum-idle: 2
#
#
#  # JPA 配置
#  jpa:
#    # MySQL 主数据库配置
#    primary:
#      hibernate:
#        ddl-auto: update
#      show-sql: true
#      properties:
#        hibernate:
#          dialect: org.hibernate.dialect.MySQL8Dialect
#          format_sql: true

#    # PostgreSQL 向量数据库配置
#    vector:
#      hibernate:
#        ddl-auto: validate  # 向量数据库不需要自动创建表
#      properties:
#        hibernate:
#          dialect: org.hibernate.dialect.PostgreSQLDialect

# AI 配置
  ai:
    dashscope:
      api-key: ${DASHSCOPE_API_KEY}
      chat:
        options:
          model: qwen-plus
          temperature: 0.7

#  # 向量数据库配置
#  vectorstore:
#    pgvector:
#      index-type: HNSW
#  #    dimensions: 1536
#      distance-type: COSINE_DISTANCE
#      max-document-batch-size: 10000
#      table-name: fitness_vector_store
#      schema-name: public
#      initialize-schema: true

# 健身应用配置
fitness:
  rag:
    similarity-threshold: 0.5
    top-k: 3
  chat:
    max-history: 50
# 日志配置
logging:
  level:
    com.yunhao.superai: DEBUG
    org.springframework.ai: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
#spring:
#  application:
#    name: ai-fitness-assistant
#  profiles:
#    active: local
#  ai:
#    dashscope:
#      api-key: your-api-key
#      chat:
#        options:
#          model: qwen-plus
##    mcp:
##      client:
###        sse:
###          connections:
###            server1:
###              url: http://localhost:8127
##         stdio:
##         servers-configuration: classpath:mcp-servers.json
#
#server:
#  port: 8123
#  servlet:
#    context-path: /api
## springdoc-openapi
#springdoc:
#  swagger-ui:
#    path: /swagger-ui.html
#    tags-sorter: alpha
#    operations-sorter: alpha
#  api-docs:
#    path: /v3/api-docs
#  group-configs:
#    - group: 'default'
#      paths-to-match: '/**'
#      packages-to-scan: com.yunhao.superai.controller
## knife4j
#knife4j:
#  enable: true
#  setting:
#    language: zh_cn
#

